(* 2 4)
(+ 2 (* 2 3))
(+ 2 (+ 2 (* 2 2)))
(+ 2 (+ 2 (+ 2 (* 2 1))))
(+ 2 (+ 2 (+ 2 (+ 2 (* 2 0)))))
(+ 2 (+ 2 (+ 2 (+ 2 0))))
(+ 2 (+ 2 (+ 2 2)))
(+ 2 (+ 2 4))
(+ 2 6)
8

(define (* a b))  
  (define (*-i a b r)
    (cond ((= b 0) r)
          ((= b 1) (+ a r))
          ((even? b) (*-i (double a) (halve b) r))
          (else (*-i a (- b 1) (+ a r)))))
  ;; use the larger value as the first arg to reduce steps
  (if (> a b) (*-i a b 0) (*-i b a 0)))

(* 2 4)
(*-i 2 4 0)
(*-i 4 2 0)
(*-i 8 1 0)
8

(* 2 0)
(*-i 2 0 0)
0

(* 2 3)
(*-i 2 3 0)
(*-i 2 2 2)
(*-i 4 1 2)
6

(* 3 5)
(*-i 3 5 0)
(*-i 3 4 3)
(*-i 6 2 3)
(*-i 12 1 3)
15 

(* 3 100)
(*-i 3   100 0)
(*-i 6   50  0)
(*-i 12  25  0)
(*-i 12  24  12)
(*-i 24  12  12)
(*-i 48  6   12)
(*-i 96  3   12)
(*-i 96  2   108)
(*-i 192 1   108)
300

;; after adding the arg switch improvement
(* 3 100)
(*-i 100 3 0)
(*-i 100 2 100)
(*-i 200 1 100)
300
